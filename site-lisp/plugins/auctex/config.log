This file contains any messages produced by compilers while
running configure, to aid debugging if configure makes a mistake.

It was created by auctex configure 12.3, which was
generated by GNU Autoconf 2.69.  Invocation command line was

  $ ./configure --with-texmf-dir=/Users/zerrari/Library/texmf

## --------- ##
## Platform. ##
## --------- ##

hostname = zhangyizhongdeMacBook-Pro.local
uname -m = x86_64
uname -r = 19.6.0
uname -s = Darwin
uname -v = Darwin Kernel Version 19.6.0: Thu Oct 29 22:56:45 PDT 2020; root:xnu-6153.141.2.2~1/RELEASE_X86_64

/usr/bin/uname -p = i386
/bin/uname -X     = unknown

/bin/arch              = unknown
/usr/bin/arch -k       = unknown
/usr/convex/getsysinfo = unknown
/usr/bin/hostinfo      = Mach kernel version:
	 Darwin Kernel Version 19.6.0: Thu Oct 29 22:56:45 PDT 2020; root:xnu-6153.141.2.2~1/RELEASE_X86_64
Kernel configured for up to 4 processors.
2 processors are physically available.
4 processors are logically available.
Processor type: x86_64h (Intel x86-64h Haswell)
Processors active: 0 1 2 3
Primary memory available: 8.00 gigabytes
Default processor set: 394 tasks, 1647 threads, 4 processors
Load average: 3.08, Mach factor: 2.04
/bin/machine           = unknown
/usr/bin/oslevel       = unknown
/bin/universe          = unknown

PATH: /Applications/Tex/TeX Live Utility.app
PATH: /usr/local/opt/llvm/bin
PATH: /usr/local/bin
PATH: /usr/bin
PATH: /bin
PATH: /usr/sbin
PATH: /sbin
PATH: /Library/TeX/texbin
PATH: /Library/Apple/usr/bin
PATH: /Applications/Wireshark.app/Contents/MacOS
PATH: /Users/zerrari/Library/Python/3.8/bin


## ----------- ##
## Core tests. ##
## ----------- ##

configure:1776: checking for make
configure:1792: found /usr/bin/make
configure:1803: result: make
configure:1819: checking whether make sets $(MAKE)
configure:1841: result: yes
configure:1893: checking for a BSD-compatible install
configure:1961: result: /usr/local/bin/ginstall -c
configure:1974: checking for date with git
configure:1987: result: 2021-08-04
configure:1990: checking for release with git
configure:2003: result: git not found, checking for release in ChangeLog:
configure:2012: result: 12.3
configure:2021: checking for date with git
configure:2034: result: 2021-08-04
configure:2037: checking for release with git
configure:2050: result: git not found, checking for release in ChangeLog:
configure:2059: result: 12.3
configure:2088: checking for emacs
configure:2106: found /usr/local/bin/emacs
configure:2118: result: /usr/local/bin/emacs
configure:2137: checking for Emacs prefix
/usr/local/bin/emacs -batch -no-site-file -eval (let* ((cmd(pop command-line-args-left))(x (condition-case nil (let*
    ((prefix (directory-file-name (file-name-directory (executable-find cmd))))
     (parent (directory-file-name (file-name-directory prefix))))
    (if (string= (file-name-nondirectory prefix) "bin")
        (setq prefix parent)
      (if (string= (file-name-nondirectory parent) "bin")
         (setq prefix (directory-file-name (file-name-directory parent)))))
    prefix) (error NONE)))) (write-region (if (stringp x) x (prin1-to-string x)) nil "./conftest-20809")) /usr/local/bin/emacs
=> /usr/local
configure:2156: result: "/usr/local"
configure:2161: checking if Emacs is recent enough
/usr/local/bin/emacs -batch -no-site-file -eval (let* ((x (cond ((< emacs-major-version 24) "no")
			 ((> emacs-major-version 24) "yes")
			 ((< emacs-minor-version 01) "no")
			 (t "yes")))) (write-region (if (stringp x) x (prin1-to-string x)) nil "./conftest-20809"))
=> yes
configure:2175: result: yes
configure:2212: checking if build directory is valid
/usr/local/bin/emacs -batch -eval (let* ((x (if (or (member (directory-file-name default-directory) load-path)	      (member (file-name-as-directory default-directory) load-path))	 "no" "yes"))) (write-region (if (stringp x) x (prin1-to-string x)) nil "./conftest-20809"))
=> yes
configure:2228: result: yes
configure:2245: checking where lisp files go
/usr/local/bin/emacs -batch -eval (let* ((prefix(pop command-line-args-left)) (expanded(pop command-line-args-left)) (x (catch 22
       (let (reldir (dirs load-path))
	  (dolist (name (list "emacs/site-lisp" "emacs/site-packages"
	      "site-lisp" "site-packages") "NONE")
	    (dolist (dir dirs)
	      (when (and dir
	      	         (setq dir (directory-file-name dir))
                         (file-name-absolute-p dir)
	      	         (file-directory-p dir)
	                 (not (string-match "\`\.\."
                           (setq reldir (file-relative-name dir expanded))))
			 (not (file-name-absolute-p reldir))
                         (let ((name name) (dir dir))
		           (while (and dir name
		                       (string= (file-name-nondirectory dir)
		                                (file-name-nondirectory name))
                              (setq dir (file-name-directory dir)
				   name (file-name-directory name))
			      (if (and dir name)
			         (setq dir (directory-file-name dir)
			              name (directory-file-name name)))))
		            (null name))
		   (throw 22
                      (if (string= reldir ".") (directory-file-name prefix)
                        (concat (file-name-as-directory prefix)
                                reldir))))))))))) (write-region (if (stringp x) x (prin1-to-string x)) nil "./conftest-20809")) ${datadir}/emacs /usr/local/share/emacs
=> ${datadir}/emacs/site-lisp
configure:2312: result: ${datadir}/emacs/site-lisp
configure:2316: checking what file to use for auctex startup
configure:2343: result: ${datadir}/emacs/site-lisp/auctex.el
configure:2346: checking what file to use for preview startup
configure:2373: result: ${datadir}/emacs/site-lisp/preview-latex.el
configure:2383: checking where the package lisp files go
/usr/local/bin/emacs -batch -no-site-file -eval (let* ((path(pop command-line-args-left)) (lispdir(pop command-line-args-left)) (startup(pop command-line-args-left)) (target(pop command-line-args-left))(x (progn (setq path (directory-file-name path))
  (if (or target
          (not (string= (car load-path) (directory-file-name (car load-path)))))
    (setq path (file-name-as-directory path)))
  (setq path (expand-file-name path lispdir))
  (setq startupdir (file-name-directory (expand-file-name startup lispdir)))
  (prin1-to-string
    (if (or (string-match "\`\.\."
              (setq relname (file-relative-name startupdir lispdir)))
            (file-name-absolute-p relname)
	    (string-match "\`\.\."
              (setq relname (file-relative-name path lispdir)))
 	    (file-name-absolute-p relname))
	  (concat path target)
	(cond (target
	       `(expand-file-name
                   ,(file-relative-name (concat path target) startupdir)
	           (file-name-directory load-file-name)))
              ((string= path startupdir)
	         '(file-name-directory load-file-name))
	      ((string= path (directory-file-name startupdir))
                 '(directory-file-name (file-name-directory load-file-name)))
              (t
	       `(expand-file-name
                   ,(file-relative-name path startupdir)
	           (file-name-directory load-file-name))))))))) (write-region (if (stringp x) x (prin1-to-string x)) nil "./conftest-20809")) /usr/local/share/emacs/site-lisp/auctex /usr/local/share/emacs/site-lisp /usr/local/share/emacs/site-lisp/tex-site.el
=> (expand-file-name "auctex" (file-name-directory load-file-name))
configure:2464: result: ${datadir}/emacs/site-lisp/auctex
configure:2467: checking where the data files go
/usr/local/bin/emacs -batch -no-site-file -eval (let* ((path(pop command-line-args-left)) (lispdir(pop command-line-args-left)) (startup(pop command-line-args-left)) (target(pop command-line-args-left))(x (progn (setq path (directory-file-name path))
  (if (or target
          (not (string= (car load-path) (directory-file-name (car load-path)))))
    (setq path (file-name-as-directory path)))
  (setq path (expand-file-name path lispdir))
  (setq startupdir (file-name-directory (expand-file-name startup lispdir)))
  (prin1-to-string
    (if (or (string-match "\`\.\."
              (setq relname (file-relative-name startupdir lispdir)))
            (file-name-absolute-p relname)
	    (string-match "\`\.\."
              (setq relname (file-relative-name path lispdir)))
 	    (file-name-absolute-p relname))
	  (concat path target)
	(cond (target
	       `(expand-file-name
                   ,(file-relative-name (concat path target) startupdir)
	           (file-name-directory load-file-name)))
              ((string= path startupdir)
	         '(file-name-directory load-file-name))
	      ((string= path (directory-file-name startupdir))
                 '(directory-file-name (file-name-directory load-file-name)))
              (t
	       `(expand-file-name
                   ,(file-relative-name path startupdir)
	           (file-name-directory load-file-name))))))))) (write-region (if (stringp x) x (prin1-to-string x)) nil "./conftest-20809")) /usr/local/share/emacs/site-lisp/auctex /usr/local/share/emacs/site-lisp /usr/local/share/emacs/site-lisp/tex-site.el
=> (expand-file-name "auctex" (file-name-directory load-file-name))
configure:2548: result: ${datadir}/emacs/site-lisp/auctex
/usr/local/bin/emacs -batch -no-site-file -eval (let* ((path(pop command-line-args-left)) (lispdir(pop command-line-args-left)) (startup(pop command-line-args-left)) (target(pop command-line-args-left))(x (progn (setq path (directory-file-name path))
  (if (or target
          (not (string= (car load-path) (directory-file-name (car load-path)))))
    (setq path (file-name-as-directory path)))
  (setq path (expand-file-name path lispdir))
  (setq startupdir (file-name-directory (expand-file-name startup lispdir)))
  (prin1-to-string
    (if (or (string-match "\`\.\."
              (setq relname (file-relative-name startupdir lispdir)))
            (file-name-absolute-p relname)
	    (string-match "\`\.\."
              (setq relname (file-relative-name path lispdir)))
 	    (file-name-absolute-p relname))
	  (concat path target)
	(cond (target
	       `(expand-file-name
                   ,(file-relative-name (concat path target) startupdir)
	           (file-name-directory load-file-name)))
              ((string= path startupdir)
	         '(file-name-directory load-file-name))
	      ((string= path (directory-file-name startupdir))
                 '(directory-file-name (file-name-directory load-file-name)))
              (t
	       `(expand-file-name
                   ,(file-relative-name path startupdir)
	           (file-name-directory load-file-name))))))))) (write-region (if (stringp x) x (prin1-to-string x)) nil "./conftest-20809"))  /usr/local/share/emacs/site-lisp /usr/local/share/emacs/site-lisp/auctex.el tex-site.el
=> (expand-file-name "tex-site.el" (file-name-directory load-file-name))
configure:2625: checking where the info files go
configure:2627: result: ${datarootdir}/info
configure:2630: checking where automatically generated global style hooks go
configure:2640: result: ${localstatedir}/auctex
/usr/local/bin/emacs -batch -no-site-file -eval (let* ((path(pop command-line-args-left)) (lispdir(pop command-line-args-left)) (startup(pop command-line-args-left)) (target(pop command-line-args-left))(x (progn (setq path (directory-file-name path))
  (if (or target
          (not (string= (car load-path) (directory-file-name (car load-path)))))
    (setq path (file-name-as-directory path)))
  (setq path (expand-file-name path lispdir))
  (setq startupdir (file-name-directory (expand-file-name startup lispdir)))
  (prin1-to-string
    (if (or (string-match "\`\.\."
              (setq relname (file-relative-name startupdir lispdir)))
            (file-name-absolute-p relname)
	    (string-match "\`\.\."
              (setq relname (file-relative-name path lispdir)))
 	    (file-name-absolute-p relname))
	  (concat path target)
	(cond (target
	       `(expand-file-name
                   ,(file-relative-name (concat path target) startupdir)
	           (file-name-directory load-file-name)))
              ((string= path startupdir)
	         '(file-name-directory load-file-name))
	      ((string= path (directory-file-name startupdir))
                 '(directory-file-name (file-name-directory load-file-name)))
              (t
	       `(expand-file-name
                   ,(file-relative-name path startupdir)
	           (file-name-directory load-file-name))))))))) (write-region (if (stringp x) x (prin1-to-string x)) nil "./conftest-20809")) /usr/local/var/auctex /usr/local/share/emacs/site-lisp /usr/local/share/emacs/site-lisp/tex-site.el
=> "/usr/local/var/auctex"
configure:2720: checking for tex
configure:2738: found /Library/TeX/texbin/tex
configure:2751: result: /Library/TeX/texbin/tex
configure:2761: checking for pdftex
configure:2779: found /Library/TeX/texbin/pdftex
configure:2792: result: /Library/TeX/texbin/pdftex
configure:2802: checking for dvips
configure:2820: found /Library/TeX/texbin/dvips
configure:2833: result: /Library/TeX/texbin/dvips
configure:2850: checking for gs
configure:2866: found /usr/local/bin/gs
configure:2877: result: gs
/usr/local/bin/emacs -batch -no-site-file -eval (let* ((dir(pop command-line-args-left))(x (if (member dir (list "NONE" (if (eq system-type 'windows-nt) "GSWIN32C.EXE" "gs"))) "" `(defvar preview-gs-command ,dir)))) (write-region (if (stringp x) x (prin1-to-string x)) nil "./conftest-20809")) gs
=> 
configure:2905: checking for latex
configure:2923: found /Library/TeX/texbin/latex
configure:2936: result: /Library/TeX/texbin/latex
configure:2952: checking for pdflatex
configure:2970: found /Library/TeX/texbin/pdflatex
configure:2982: result: /Library/TeX/texbin/pdflatex
configure:3001: checking for tex
configure:3032: result: /Library/TeX/texbin/tex
configure:3470: checking for texhash
configure:3488: found /Library/TeX/texbin/texhash
configure:3500: result: /Library/TeX/texbin/texhash
configure:3510: checking for initexmf
configure:3537: result: /Library/TeX/texbin/texhash
configure:3596: checking for glaring installation conflicts
/usr/local/bin/emacs -batch -eval (let* ((packagelispdir(pop command-line-args-left)) (previewstartfile(pop command-line-args-left))(x 
     (concat
       (and (setq tmp (locate-library "preview.elc"))
            (not (string= (file-truename tmp)
                       (file-truename (expand-file-name "preview.elc"
                                         packagelispdir))))
            (format "Conflicting previous installation in `%s' found!
"
                    (file-name-directory tmp)))
       (and (setq tmp (locate-library "preview-latex.el"))
            (not (string= (file-truename tmp)
                          (file-truename previewstartfile)))
            (format "Conflicting previous startup file `%s' found!
" tmp))))) (write-region (if (stringp x) x (prin1-to-string x)) nil "./conftest-20809")) /usr/local/share/emacs/site-lisp/auctex /usr/local/share/emacs/site-lisp/preview-latex.el
=> 
configure:3658: result: probably none
configure:3718: checking for perl
configure:3736: found /usr/local/bin/perl
configure:3749: result: /usr/local/bin/perl
configure:3763: checking for makeinfo
configure:3781: found /usr/bin/makeinfo
configure:3794: result: /usr/bin/makeinfo
configure:3804: checking for texi2html
configure:3835: result: :
configure:3845: checking for texi2dvi
configure:3863: found /usr/bin/texi2dvi
configure:3876: result: /usr/bin/texi2dvi
configure:3886: checking for texi2pdf
configure:3904: found /usr/bin/texi2pdf
configure:3917: result: /usr/bin/texi2pdf
configure:3932: checking for install-info
configure:3950: found /usr/bin/install-info
configure:3963: result: /usr/bin/install-info
configure:4202: creating ./config.status

## ---------------------- ##
## Running config.status. ##
## ---------------------- ##

This file was extended by auctex config.status 12.3, which was
generated by GNU Autoconf 2.69.  Invocation command line was

  CONFIG_FILES    = 
  CONFIG_HEADERS  = 
  CONFIG_LINKS    = 
  CONFIG_COMMANDS = 
  $ ./config.status 

on zhangyizhongdeMacBook-Pro.local

config.status:761: creating Makefile
config.status:761: creating tex-site.el.out
config.status:761: creating doc/Makefile
config.status:761: creating auctex.el
config.status:761: creating preview.el
config.status:761: creating latex/Makefile

## ---------------- ##
## Cache variables. ##
## ---------------- ##

ac_cv_env_GS_set=
ac_cv_env_GS_value=
ac_cv_env_INSTALL_INFO_set=
ac_cv_env_INSTALL_INFO_value=
ac_cv_env_MAKEINFO_set=
ac_cv_env_MAKEINFO_value=
ac_cv_env_PERL_set=
ac_cv_env_PERL_value=
ac_cv_env_TEXHASH_set=
ac_cv_env_TEXHASH_value=
ac_cv_env_build_alias_set=
ac_cv_env_build_alias_value=
ac_cv_env_host_alias_set=
ac_cv_env_host_alias_value=
ac_cv_env_target_alias_set=
ac_cv_env_target_alias_value=
ac_cv_path_DVIPS=/Library/TeX/texbin/dvips
ac_cv_path_EMACS=/usr/local/bin/emacs
ac_cv_path_INSTALL_INFO=/usr/bin/install-info
ac_cv_path_LATEX=/Library/TeX/texbin/latex
ac_cv_path_MAKEINFO=/usr/bin/makeinfo
ac_cv_path_PDFLATEX=/Library/TeX/texbin/pdflatex
ac_cv_path_PDFTEX=/Library/TeX/texbin/pdftex
ac_cv_path_PERL=/usr/local/bin/perl
ac_cv_path_TEX=/Library/TeX/texbin/tex
ac_cv_path_TEXHASH=/Library/TeX/texbin/texhash
ac_cv_path_TEXI2DVI=/usr/bin/texi2dvi
ac_cv_path_TEXI2HTML=:
ac_cv_path_TEXI2PDF=/usr/bin/texi2pdf
ac_cv_path_install='/usr/local/bin/ginstall -c'
ac_cv_prog_GS=gs
ac_cv_prog_MAKECMD=make
ac_cv_prog_TEXHASH=/Library/TeX/texbin/texhash
ac_cv_prog_make_make_set=yes

## ----------------- ##
## Output variables. ##
## ----------------- ##

AUCTEXDATE='2021-08-04'
AUCTEXVERSION='12.3'
DEFS='-DPACKAGE_NAME=\"auctex\" -DPACKAGE_TARNAME=\"auctex\" -DPACKAGE_VERSION=\"12.3\" -DPACKAGE_STRING=\"auctex\ 12.3\" -DPACKAGE_BUGREPORT=\"bug-auctex@gnu.org\" -DPACKAGE_URL=\"\"'
DVIPS='/Library/TeX/texbin/dvips'
ECHO_C='\c'
ECHO_N=''
ECHO_T=''
EMACS='/usr/local/bin/emacs'
EMACS_FLAVOR='emacs'
GS='gs'
INSTALL_DATA='${INSTALL} -m 644'
INSTALL_INFO='/usr/bin/install-info'
INSTALL_PROGRAM='${INSTALL}'
INSTALL_SCRIPT='${INSTALL}'
LATEX='/Library/TeX/texbin/latex'
LIBOBJS=''
LIBS=''
LTLIBOBJS=''
MAKECMD='make'
MAKEINFO='/usr/bin/makeinfo'
PACKAGE_BUGREPORT='bug-auctex@gnu.org'
PACKAGE_NAME='auctex'
PACKAGE_STRING='auctex 12.3'
PACKAGE_TARNAME='auctex'
PACKAGE_URL=''
PACKAGE_VERSION='12.3'
PATH_SEPARATOR=':'
PDFLATEX='/Library/TeX/texbin/pdflatex'
PDFTEX='/Library/TeX/texbin/pdftex'
PERL='/usr/local/bin/perl'
PREVIEWDATE='2021-08-04'
PREVIEWVERSION='12.3'
SET_MAKE=''
SHELL='/bin/sh'
TEX='/Library/TeX/texbin/tex'
TEXHASH='/Library/TeX/texbin/texhash'
TEXI2DVI='/usr/bin/texi2dvi'
TEXI2HTML=':'
TEXI2PDF='/usr/bin/texi2pdf'
TEXMFGEN='preview.sty prauctex.def prauctex.cfg prshowbox.def prshowlabels.def prtracingall.def prtightpage.def prlyx.def prcounters.def prfootnotes.def'
auctexstartfile='${datadir}/emacs/site-lisp/auctex.el'
autodir='${localstatedir}/auctex'
bindir='${exec_prefix}/bin'
build_alias=''
datadir='${datarootdir}'
datarootdir='${prefix}/share'
docdir='${datarootdir}/doc/${PACKAGE_TARNAME}'
dvidir='${docdir}'
exec_prefix='${prefix}'
host_alias=''
htmldir='${docdir}'
includedir='${prefix}/include'
infodir='${datarootdir}/info'
libdir='${exec_prefix}/lib'
libexecdir='${exec_prefix}/libexec'
lispGS=''
lispautodir='"/usr/local/var/auctex"'
lispdir='${datadir}/emacs/site-lisp'
lisppackagedatadir='(expand-file-name "auctex" (file-name-directory load-file-name))'
lisppackagelispdir='(expand-file-name "auctex" (file-name-directory load-file-name))'
lisppackagetexstyles=''
lisptexsite='(expand-file-name "tex-site.el" (file-name-directory load-file-name))'
localedir='${datarootdir}/locale'
localstatedir='${prefix}/var'
mandir='${datarootdir}/man'
oldincludedir='/usr/include'
packagedatadir='${datadir}/emacs/site-lisp/auctex'
packagelispdir='${datadir}/emacs/site-lisp/auctex'
packagetexstyles=''
pdfdir='${docdir}'
prefix='/usr/local'
preview_enabled='yes'
previewdocdir='/Users/zerrari/Library/texmf/doc/latex/styles'
previewstartfile='${datadir}/emacs/site-lisp/preview-latex.el'
previewtexmfdir='/Users/zerrari/Library/texmf/tex/latex/preview'
program_transform_name='s,x,x,'
psdir='${docdir}'
sbindir='${exec_prefix}/sbin'
sharedstatedir='${prefix}/com'
sysconfdir='${prefix}/etc'
target_alias=''
texmfdir='/Users/zerrari/Library/texmf'
texsite=''

## ----------- ##
## confdefs.h. ##
## ----------- ##

/* confdefs.h */
#define PACKAGE_NAME "auctex"
#define PACKAGE_TARNAME "auctex"
#define PACKAGE_VERSION "12.3"
#define PACKAGE_STRING "auctex 12.3"
#define PACKAGE_BUGREPORT "bug-auctex@gnu.org"
#define PACKAGE_URL ""

configure: exit 0
