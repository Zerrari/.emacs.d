\input texinfo    @c -*- texinfo -*-
@c %**start of header
@setfilename annalist.info
@settitle Annalist User Manual
@documentencoding UTF-8
@documentlanguage en
@c %**end of header

@dircategory Emacs
@direntry
* Annalist: (annalist). Record and display information such as keybindings.
@end direntry

@finalout
@titlepage
@title Annalist User Manual
@author Fox Kiester
@end titlepage

@contents

@ifnottex
@node Top
@top Annalist User Manual

@uref{https://melpa.org/#/annalist, file:https://melpa.org/packages/annalist-badge.svg}
@uref{https://travis-ci.org/noctuid/annalist.el, https://travis-ci.org/noctuid/annalist.el.svg?branch=master}

@quotation
Incessant wind sweeps the plain. It murmurs on across grey stone, carrying dust from far climes to nibble eternally at the memorial pillars. There are a few shadows out there still but they are the weak and the timid and the hopelessly lost.

It is immortality of a sort.

Memory is immortality of a sort.

In the night, when the wind dies and silence rules the place of glittering stone, I remember. And they all live again.

@end quotation

@samp{annalist.el} is a library that can be used to record information and later print that information using @samp{org-mode} headings and tables. It allows defining different types of things that can be recorded (e.g. keybindings, settings, hooks, and advice) and supports custom filtering, sorting, and formatting. @samp{annalist} is primarily intended for use in other packages like @samp{general} and @samp{evil-collection}, but it can also be used directly in a user's configuration.

@image{https://user-images.githubusercontent.com/4250696/63480582-64e2cb00-c460-11e9-9571-706b5b96992c,,,,png}
@end ifnottex

@menu
* Usage::

@detailmenu
--- The Detailed Node Listing ---

Usage

* Disabling Annalist::
* Terminology::
* Settings::
* Defining New Types::
* Defining Views::
* Recording::
* Describing::
* Helper Functions::
* Builtin Types::

Defining New Types

* Type Top-level Settings::
* Type Item Settings::
* @samp{:record-update}, @samp{:preprocess}, and @samp{:postprocess} Settings Argument: @samp{record-update} @samp{preprocess} and @samp{postprocess} Settings Argument. 

Defining Views

* View Top-level Settings::
* View Item Settings::

Helper Functions

* List Helpers::
* Formatting Helpers::
* Sorting Helpers::

Builtin Types

* Keybindings Type::

@end detailmenu
@end menu

@node Usage
@chapter Usage

@menu
* Disabling Annalist::
* Terminology::
* Settings::
* Defining New Types::
* Defining Views::
* Recording::
* Describing::
* Helper Functions::
* Builtin Types::
@end menu

@node Disabling Annalist
@section Disabling Annalist

@quotation
What fool always has his nose in everywhere because he thinks he has to know so he can record it in his precious Annals?

@end quotation

If you use a library that uses @samp{annalist} (e.g. @samp{evil-collection} or @samp{general}) but don't need it's functionality during init or at all, you can set @samp{annalist-record} to nil to shave some milliseconds off of your init time (especially if you have a lot of keybindings). Alternatively, if you only want to prevent @samp{annalist} from recording certain things or have it only record certain things, you can configure @samp{annalist-record-blacklist} or @samp{annalist-record-whitelist} respectively.

@node Terminology
@section Terminology

@itemize
@item
item - and individual recorded item; may be displayed as a heading or as a table column entry (e.g. a key such as @samp{C-c})
@item
record - a list of related, printable items corresponding to one piece of information (e.g. a single keybinding: a list of a keymap, key, and definition)
@item
metadata - a plist of information about a data list that should not be printed; appears as the last item in a record
@item
tome - a collection of records of a specific type
@end itemize

@node Settings
@section Settings

Annalist provides @samp{annalist-describe-hook} which is run in annalist description buffers after they have been populated but before they are marked read-only:
@lisp
(add-hook 'annalist-describe-hook
          (lambda () (visual-fill-column-mode -1)))
@end lisp

@node Defining New Types
@section Defining New Types

@quotation
Three huge tomes bound in worn, cracked dark leather rested on a large, long stone lectern, as though waiting for three speakers to step up and read at the same time.

@end quotation

Annalist provides the function @code{annalist-define-tome} for defining new types of tomes:
@lisp
(annalist-define-tome 'battles
  '(:primary-key (year name)
    :table-start-index 1
    year
    name
    casualties
    ...))
@end lisp

At minimum, a type definition must include @samp{:primary-key}, @samp{:table-start-index}, and a symbol for each item records should store. Items should be defined in the order they should appear in org headings and then in the table.

@menu
* Type Top-level Settings::
* Type Item Settings::
* @samp{:record-update}, @samp{:preprocess}, and @samp{:postprocess} Settings Argument: @samp{record-update} @samp{preprocess} and @samp{postprocess} Settings Argument. 
@end menu

@node Type Top-level Settings
@subsection Type Top-level Settings

These settings apply to the entirety of the recorded information.

@itemize
@item
@samp{:table-start-index} - the index of the first item to be printed in an org table; previous items are printed as headings (default: none)
@item
@samp{:primary-key} - the item or list of items that uniquely identifies the record; used with the  @samp{:test} values for those items to check for an old record that should be replaced/updated (default: none)
@item
@samp{:record-update} - a function used to update a record before recording it; this can be used to, for example, set the value of an item to store the previous value of another item; the function is called with @samp{old-record} (nil if none), @samp{new-record}, and @samp{settings}; see @code{annalist--update-keybindings} for an example of how to create such a function (default: none)
@item
@samp{:preprocess} - a function used to alter a record before doing anything with it; it is passed @samp{record} and @samp{settings} and should return the altered record; see the default keybindings type for an example (default: none)
@item
@samp{:test} - test function used for comparing the primary key (as a list of each item in the order it appears in the definition); you will need to create the test with @code{define-hash-table-test} if it does not exist (default: @code{equal}; generally should be unnecessary to change)
@item
@samp{:defaults} - a plist of default item settings; see below for valid item settings (default: none)
@end itemize

@node Type Item Settings
@subsection Type Item Settings

Item settings only apply to a specific item. Defaults for items that don't explicitly specify a setting can be set using the top-level @samp{:defaults} keyword.

@itemize
@item
@samp{:test} - test function used for comparing items; only applicable to heading items; you will need to create the test with @code{define-hash-table-test} if it does not exist (default: @code{equal}; generally should be unnecessary to change)
@end itemize

@node @samp{record-update} @samp{preprocess} and @samp{postprocess} Settings Argument
@subsection @samp{:record-update}, @samp{:preprocess}, and @samp{:postprocess} Settings Argument

The settings plist past to the @samp{:record-update} function contains all information for both the tome type and view. The information is converted into a valid plist and some extra keywords are added. Here is an example:
@lisp
'(:table-start-index 2
  :primary-key (keymap state key)
  ;; the following keywords are generated for convenience
  :type keybindings
  :key-indices (2 1 0)
  :final-index 4
  :metadata-index 5
  ;; item settings can be accessed by their symbol or their index
  keymap (:name keymap :index 0 :format annalist-code)
  0 (:name keymap :index 0 :format annalist-code)
  ...)
@end lisp

@node Defining Views
@section Defining Views

@quotation
In those days the company was in service to…

@end quotation

Views contain settings for formatting and displaying recorded information. Settings from the type definition cannot be changed later. On the other hand, views are for all settings that a user may want to change for a particular @code{annalist-describe} call. They are defined using the same format as tome types:
@lisp
(annalist-define-view 'battles 'default
  '(:defaults (:format capitalize)
    year
    name
    (casualties :title "Deaths")
    ...))
@end lisp

The @samp{default} view is what @code{annalist-describe} will use if no view name is explicitly specified. To prevent naming conflicts, external packages that create views should prefix the views with their symbol (e.g. @samp{general-alternate-view}).

@menu
* View Top-level Settings::
* View Item Settings::
@end menu

@node View Top-level Settings
@subsection View Top-level Settings

These settings apply to the entirety of the recorded information.

@itemize
@item
@samp{:predicate} - a function that is passed the entire record and returns non-nil if the record should be printed (default: none)
@item
@samp{:sort} - a function used to sort records in each printed table; the function is passed two records and and should return non-nil if the first record should come first (default: none; tables are printed in recorded order)
@item
@samp{:hooks} - a function or a list of functions to run in the describe buffer after printing all headings and tables before making the buffer readonly; these run before @samp{annalist-describe-hook} (default: none)
@item
@samp{:postprocess} - a function used to alter a record just before printing it; it is passed @samp{record} and @samp{settings} and should return the altered record; an example use case would be to alter the record using its metadata (e.g. by replacing a keybinding definition with a which-key description, if one exists) (default: none)
@item
@samp{:defaults} - a plist of default item settings; see below for valid item settings (default: none)
@end itemize

There is also a special @samp{:inherit} keyword that can be used to create a new type of tome that is based on another type:
@lisp
(annalist-define-view 'keybindings 'alternate
  ;; override title for key column
  '((key :title "Keybinding")
    ...)
  :inherit 'keybindings)
@end lisp

@node View Item Settings
@subsection View Item Settings

Item settings only apply to a specific item. Defaults for items that don't explicitly specify a setting can be set using the top-level @samp{:defaults} keyword.
@lisp
(annalist-define-view 'keybindings 'my-view
  '(:defaults (:format #'capitalize)
    ;; surround key with = instead of capitalizing
    (key :format #'annalist-verbatim)
    ;; perform no formatting on definition
    (definition :format nil)))
@end lisp

Sorting/filtering (only for items displayed in headings):
@itemize
@item
@samp{:predicate} - a function that is passed the item and returns non-nil if it should be printed; only applicable to heading items (default: none)
@item
@samp{:prioritize} - list of items that should be printed before any others; only applicable to heading items (default: none)
@item
@samp{:sort} - a function used to sort records; only applicable to heading items; the function is passed two items and and should return non-nil if the first item should come first (default: none; printed in recorded order)
@end itemize

Formatting:
@itemize
@item
@samp{:title} - a description of the item; used as the column title (default: capitalize the symbol name; local only)
@item
@samp{:format} - function to run on the item value before it is printed (e.g. @code{#'capitalize}, @code{#'annalist-code}, @code{#'annalist-verbatim}, etc.); note that this is run on the item as-is if it has not been truncated, so the function may need to convert the item to a string first; has no effect if the item is extracted to a footnote/source block (default: none)
@item
@samp{:max-width} - the max character width for an item; note that this is compared to the item as-is before any formatting (default: 50)
@item
@samp{:extractp} - function to determine whether to extract longer entries into footnotes instead of truncating them; (default: @code{listp})
@item
@samp{:src-block-p} function to determine whether to extract to a source block when the @samp{:extractp} function returns non-nil (default: @code{listp})
@end itemize

@node Recording
@section Recording

@quotation
The Lady said, “I wanted you to see this, Annalist.”
[…]
“What is about to transpire. So that it is properly recorded in at least one place.”

@end quotation

@code{annalist-record} is used to record information. It requires three arguments: @samp{annalist} @samp{type} @samp{record}. The @samp{annalist} argument will usually be the same as the package prefix that is recording the data. @samp{annalist} and any other names prefixed by @samp{annalist} are reserved for this package. @samp{type} is the type of data to record, and @samp{record} is the actual data. Optionally, the user can also specify metadata that won't be printed after the final item. Buffer-local records should additionally specify @samp{:local t}. Here is an example:
@lisp
(annalist-record 'me 'keybindings
                 (list
                  ;; keymap state key definition previous-definition
                  'global-map nil (kbd "C-+") #'text-scale-increase nil
                  ;; metadata can be specified after final item
                  (list :zoom-related-binding t)))

;; alternatively, record using plist instead of ordered list
(annalist-record 'me 'keybindings
                 (list
                  'keymap 'global-map
                  'state nil
                  'key (kbd "C-+")
                  'definition #'text-scale-increase
                  ;; metadata can be specified with `t' key
                  t (list :zoom-related-binding t))
                 :plist t)
@end lisp

Some items can potentially be recorded as nil. In the previous example, the evil @samp{state} is recorded as nil (which will always be the case for non-evil users). When a heading item is nil, the heading at that level will just be skipped/not printed.

@node Describing
@section Describing

@quotation
Once each month, in the evening, the entire Company assembles so the Annalist can read from his predecessors.

@end quotation

@code{annalist-describe} is used to describe information. It takes three arguments: @samp{name} @samp{type view}. @samp{view} is optional (defaults to @samp{default}). For example:
@lisp
(annalist-describe 'me 'keybindings)
@end lisp

It is possible to have custom filtering/sorting behavior by using a custom view:
@lisp
(annalist-define-view 'keybindings 'active-keybindings-only
  '((keymap
     ;; only show keys bound in active keymaps
     :predicate #'annalist--active-keymap
     ;; sort keymaps alphabetically
     :sort #'annalist--string-<)))

(annalist-describe 'my 'keybindings 'active-keybindings-only)
@end lisp

@samp{annalist-org-startup-folded} will determine what @samp{org-startup-folded} setting to use (defaults to nil; all headings will be unfolded).

@node Helper Functions
@section Helper Functions

@menu
* List Helpers::
* Formatting Helpers::
* Sorting Helpers::
@end menu

@node List Helpers
@subsection List Helpers

@code{annalist-plistify-record} can be used to convert a record that is an ordered list to a plist. @code{annalist-listify-record} can be used to do the opposite. This is what the @samp{:plist} argument for @code{annalist-record} uses internally. These functions can be useful, for example, inside a @samp{:record-update} function, so that you can get record items by their name instead of by their index. However, if there will be a lot of data recorded for a type during Emacs initialization time, the extra time to convert between list types can add up, so it's recommended that you don't use these functions or @samp{:plist} in such cases.

@node Formatting Helpers
@subsection Formatting Helpers

@enumerate
@item
@samp{:format} Helpers


Annalist provides @code{annalist-verbatim} (e.g. @code{=verbatim text=}), @code{annalist-code} (e.g. @samp{~my-function~}), and @code{annalist-capitalize}. There is also an @code{annalist-compose} helper for combining different formatting functions.

@item
Formatting Emacs Lisp Source Blocks


By default, Emacs Lisp extracted into source blocks will just be one long line. You can add @code{annalist-multiline-source-blocks} to a view's @samp{:hooks} keyword or to @samp{annalist-describe-hook} to autoformat org source blocks if lispy is installed. By default, it uses @code{lispy-alt-multiline}. To use @code{lispy-multiline} instead, customize @code{annalist-multiline-function}.

The builtin types have @code{annlist-multiline-source-blocks} in their @samp{:hooks} setting by default.

Here is an example of what this looks like:

@image{https://user-images.githubusercontent.com/4250696/62338313-1025e300-b4a6-11e9-845f-179c02abef35,,,,png}
@end enumerate

@node Sorting Helpers
@subsection Sorting Helpers

Annalist provides @code{annalist-string-<} and @code{annalist-key-<} (e.g. @code{(kbd "C-c a")} vs @code{(kbd "C-c b")}).

@node Builtin Types
@section Builtin Types

@menu
* Keybindings Type::
@end menu

@node Keybindings Type
@subsection Keybindings Type

Annalist provides a type for recording keybindings that is used by @samp{evil-collection} and @samp{general}. When recording a keybinding, the keymap must be provided as a symbol. Here is an example:
@lisp
(annalist-record 'annalist 'keybindings
                 (list 'org-mode-map nil (kbd "C-c g") #'counsel-org-goto))
@end lisp

In addition to the default view, it has a @samp{valid} to only show keybindings for keymaps/states that exist (since some keybindings may be in a @code{with-eval-after-load}). It also has an @samp{active} view to only show keybindings that are currently active.

@bye
